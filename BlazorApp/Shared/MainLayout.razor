@inherits LayoutComponentBase

@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.Extensions.Options

@inject AuthenticationStateProvider _AuthenticationStateProvider
@inject SignOutSessionStateManager SignOutManager
@inject IOptionsSnapshot<RemoteAuthenticationOptions<ApiAuthorizationProviderOptions>> Options
@inject NavigationManager _Nav

<RadzenDialog />
<RadzenNotification />
<RadzenContextMenu />
<RadzenTooltip />

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <RadzenLabel Text="@UserName"></RadzenLabel>
            <RadzenButton Click="Login" Visible="@(!LoggedIn)" >Login</RadzenButton>
            <RadzenButton Click="Logout" Visible="@(LoggedIn)">Logout</RadzenButton>
        </div>     

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code{
    bool LoggedIn = false;
    string UserName = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        _AuthenticationStateProvider.AuthenticationStateChanged += async _ => await ReloadInfo();

        await ReloadInfo();

        await base.OnInitializedAsync();
    }

    public async Task ReloadInfo()
    {
        var state = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (state.User.Identity.IsAuthenticated)
        {
            LoggedIn = true;
            UserName = state?.User.Identity.Name;
        }
    }

    public async Task Login()
    {
        _Nav.NavigateTo(Options.Get(
            Microsoft.Extensions.Options.Options.DefaultName)
            .AuthenticationPaths.LogInPath);
    }

    public async Task Logout()
    {
        await SignOutManager.SetSignOutState();
        _Nav.NavigateTo("authentication/logout");
    }
}